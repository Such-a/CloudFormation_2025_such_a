
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::LanguageExtensions
Description: >
  Aurora mysql Database Stack with Secrets Manager integration.
  Automatically creates secrets depending on the environment.

Parameters:
  Environment:
    Type: String
    Default: test
    AllowedValues: ["test", "prod"]
    Description: Choose between test and prod environments.

  VpcId:
    Type: String
    Description: VPC ID where the database will be deployed.
  
  DbSubnetGroupId:
    Type: String
    Description: The name or ARN of an existing DB Subnet Group.

  MiddlewareInstanceSg:
    Type: String
    Description: Security Group ID for the middleware/application that connects to the database.

Conditions:
  ProdEnv: !Equals [!Ref Environment, "prod"]
  TestEnv: !Equals [!Ref Environment, "test"]

Resources:

  HardcodedDatabaseSecret:
    Condition: TestEnv
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "Hardcoded database credentials for testing (not secure)."
      SecretString:
        Fn::ToJsonString:
          username: "dbuser"
          password: "dbpassword"
      Tags:
        - Key: Env
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${Environment}-${AWS::StackName}-secret"

  GeneratedDatabaseSecret:
    Condition: ProdEnv
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "Auto-generated database credentials for production."
      GenerateSecretString:
        SecretStringTemplate:
          Fn::ToJsonString:
            username: "dbuser"
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'''
      Tags:
        - Key: Env
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${Environment}-${AWS::StackName}-secret"

  DatabaseSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database security group
      VpcId: !Ref VpcId
      Tags:
        - Key: Env
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${Environment}-${AWS::StackName}-sg"

  Database:
    DeletionPolicy: !If [ProdEnv, "Retain", "Delete"]
    UpdateReplacePolicy: !If [ProdEnv, "Retain", "Delete"]
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-mysql
      EngineMode: provisioned
      DBSubnetGroupName: !Ref DbSubnetGroupId
      ServerlessV2ScalingConfiguration:
        MinCapacity: 1
        MaxCapacity: 1
      MasterUsername:
        Fn::If:
          - ProdEnv
          - !Sub "{{resolve:secretsmanager:${GeneratedDatabaseSecret}:SecretString:username}}"
          - !Sub "{{resolve:secretsmanager:${HardcodedDatabaseSecret}:SecretString:username}}"
      MasterUserPassword:
        Fn::If:
          - ProdEnv
          - !Sub "{{resolve:secretsmanager:${GeneratedDatabaseSecret}:SecretString:password}}"
          - !Sub "{{resolve:secretsmanager:${HardcodedDatabaseSecret}:SecretString:password}}"
      VpcSecurityGroupIds:
        - !Ref DatabaseSg
      Tags:
        - Key: Env
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${Environment}-${AWS::StackName}-cluster"

  DatabaseInstance: 
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.medium
      Engine: aurora-mysql
      DBClusterIdentifier: !Ref Database
      DBSubnetGroupName: !Ref DbSubnetGroupId
      PubliclyAccessible: true

  DatabaseSgIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref MiddlewareInstanceSg
      GroupId: !Ref DatabaseSg

Outputs:

  DatabaseEndpointAddress:
    Description: Database cluster endpoint address
    Value: !GetAtt Database.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseEndpointAddress"

  DatabaseEndpointPort:
    Description: Database cluster endpoint port
    Value: !GetAtt Database.Endpoint.Port
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseEndpointPort"

  DbCredentials:
    Description: Reference to the secret storing database credentials
    Value: !If [ProdEnv, !Ref GeneratedDatabaseSecret, !Ref HardcodedDatabaseSecret]
    Export:
      Name: !Sub "${AWS::StackName}-DbCredentials"
